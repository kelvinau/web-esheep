"use strict";var _createClass=function(){function a(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(e,t,i){return t&&a(e.prototype,t),i&&a(e,i),e}}();function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var VERSION="0.7.1",ACTIVATE_DEBUG=!1,DEFAULT_XML="http://esheep.petrucci.ch/script/animation.php",COLLISION_WITH=["div","hr"],eSheep=function(){function eSheep(e){_classCallCheck(this,eSheep),this.animationFile=DEFAULT_XML,this.id=Date.now()+Math.random(),this.DOMdiv=document.createElement("div"),this.DOMdiv.setAttribute("id",this.id),this.DOMimg=document.createElement("img"),this.DOMinfo=document.createElement("div"),this.parser=new DOMParser,this.xmlDoc=null,this.isChild=null!=e,this.tilesX=1,this.tilesY=1,this.imageW=1,this.imageH=1,this.imageX=1,this.imageY=1,this.flipped=!1,this.dragging=!1,this.infobox=!1,this.animationId=0,this.animationStep=0,this.animationNode=null,this.sprite=new Image,this.HTMLelement=null,this.randS=100*Math.random(),this.screenW=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,this.screenH=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight}return _createClass(eSheep,[{key:"Start",value:function(e){void 0!==e&&null!=e&&(this.animationFile=e);var t=new XMLHttpRequest,i=this;t.open("GET",this.animationFile,!0),t.addEventListener("readystatechange",function(){4==this.readyState&&(200==this.status?i._parseXML(this.responseText):console.error("XML not available:"+this.statusText+"\n"+this.responseText))}),t.send(null)}},{key:"remove",value:function(){this.DOMdiv=this.DOMimg=this.DOMinfo=null,document.getElementById(this.id).outerHTML=""}},{key:"_parseXML",value:function(e){var a=this;this.xmlDoc=this.parser.parseFromString(e,"text/xml");var t=this.xmlDoc.getElementsByTagName("image")[0];this.tilesX=t.getElementsByTagName("tilesx")[0].textContent,this.tilesY=t.getElementsByTagName("tilesy")[0].textContent,this.sprite.addEventListener("load",function(){ACTIVATE_DEBUG&&console.log("Sprite image loaded");var e="width:"+a.sprite.width+"px;height:"+a.sprite.height+"px;position:absolute;top:0px;left:0px;max-width: none;";a.DOMimg.setAttribute("style",e),a.DOMimg.addEventListener("dragstart",function(e){return e.preventDefault(),!1}),a.imageW=a.sprite.width/a.tilesX,a.imageH=a.sprite.height/a.tilesY,e="width:"+a.imageW+"px;height:"+a.imageH+"px;position:fixed;top:"+a.imageY+"px;left:"+a.imageX+"px;transform:rotatey(0deg);cursor:move;z-index:2000;overflow:hidden;",a.DOMdiv.setAttribute("style",e),a.DOMdiv.appendChild(a.DOMimg),a.isChild?a._spawnChild():a._spawnESheep()}),this.sprite.src="data:image/png;base64,"+t.getElementsByTagName("png")[0].textContent,this.DOMimg.setAttribute("src",this.sprite.src),this.DOMdiv.addEventListener("mousemove",function(e){if(!a.dragging&&1==e.buttons&&0==e.button){a.dragging=!0,a.HTMLelement=null;for(var t=a.xmlDoc.getElementsByTagName("animations")[0].getElementsByTagName("animation"),i=0;i<t.length;i++)if("drag"==t[i].getElementsByTagName("name")[0].textContent){a.animationId=t[i].getAttribute("id"),a.animationStep=0,a.animationNode=t[i];break}}}),document.body.addEventListener("mousemove",function(e){a.dragging&&(a.imageX=parseInt(e.clientX)-a.imageW/2,a.imageY=parseInt(e.clientY)-a.imageH/2,a.DOMdiv.style.left=a.imageX+"px",a.DOMdiv.style.top=a.imageY+"px")}),document.body.addEventListener("resize",function(){a.screenW=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,a.screenH=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight,a.imageY+a.imageH>a.screenH&&(a.imageY=a.screenH-a.imageH,a.DOMdiv.style.top=a.imageY+"px"),a.imageX+a.imageW>a.screenW&&(a.imageX=a.screenW-a.imageW,a.DOMdiv.style.left=a.imageX+"px")}),this.DOMdiv.addEventListener("contextmenu",function(e){return e.preventDefault(),!1}),this.DOMdiv.addEventListener("mouseup",function(){a.dragging&&(a.dragging=!1)}),document.body.appendChild(this.DOMdiv)}},{key:"_setPosition",value:function(e,t,i){this.DOMdiv&&(i?(this.imageX=parseInt(e),this.imageY=parseInt(t)):(this.imageX=parseInt(this.imageX)+parseInt(e),this.imageY=parseInt(this.imageY)+parseInt(t)),this.DOMdiv.style.left=this.imageX+"px",this.DOMdiv.style.top=this.imageY+"px")}},{key:"_spawnESheep",value:function(){for(var e=this.xmlDoc.getElementsByTagName("spawns")[0].getElementsByTagName("spawn"),t=0,i=0;i<e.length;i++)t+=parseInt(e[0].getAttribute("probability"));var a=Math.random()*t;for(i=t=0;i<e.length;i++)if(a<=(t+=parseInt(e[i].getAttribute("probability")))||i==e.length-1){this._setPosition(this._parseKeyWords(e[i].getElementsByTagName("x")[0].textContent),this._parseKeyWords(e[i].getElementsByTagName("y")[0].textContent),!0),ACTIVATE_DEBUG&&console.log("Spawn: "+this.imageX+", "+this.imageY),this.animationId=e[i].getElementsByTagName("next")[0].textContent,this.animationStep=0;for(var n=this.xmlDoc.getElementsByTagName("animations")[0].getElementsByTagName("animation"),s=0;s<n.length;s++)if(n[s].getAttribute("id")==this.animationId){this.animationNode=n[s];n=this.xmlDoc.getElementsByTagName("childs")[0].getElementsByTagName("child");for(var m=0;m<n.length;m++)if(n[m].getAttribute("animationid")==this.animationId){ACTIVATE_DEBUG&&console.log("Child from Spawn");var o=new eSheep(!0);o.animationId=n[m].getElementsByTagName("next")[0].textContent;var h=n[m].getElementsByTagName("x")[0].textContent,r=n[m].getElementsByTagName("y")[0].textContent;o._setPosition(this._parseKeyWords(h),this._parseKeyWords(r),!0),o.Start(this.animationFile);break}break}break}this._nextESheepStep()}},{key:"_spawnChild",value:function(){for(var e=this.xmlDoc.getElementsByTagName("animations")[0].getElementsByTagName("animation"),t=0;t<e.length;t++)if(e[t].getAttribute("id")==this.animationId){this.animationNode=e[t];break}this._nextESheepStep()}},{key:"_parseKeyWords",value:function _parseKeyWords(value){value=value.replace(/screenW/g,this.screenW),value=value.replace(/screenH/g,this.screenH),value=value.replace(/areaW/g,this.screenH),value=value.replace(/areaH/g,this.screenH),value=value.replace(/imageW/g,this.imageW),value=value.replace(/imageH/g,this.imageH),value=value.replace(/random/g,100*Math.random()),value=value.replace(/randS/g,this.randS),value=value.replace(/imageX/g,this.imageX),value=value.replace(/imageY/g,this.imageY);var ret=0;try{ret=eval(value)}catch(e){console.error("Unable to parse this position: \n'"+value+"'\n Error message: \n"+e.message)}return ret}},{key:"_getNextRandomNode",value:function(e){var t=e.getElementsByTagName("next"),i=this.xmlDoc.getElementsByTagName("animations")[0].getElementsByTagName("animation"),a=0,n=!1;if(0==t.length)return this.isChild?(ACTIVATE_DEBUG&&console.log("Remove child"),document.body.removeChild(this.DOMinfo),document.body.removeChild(this.DOMdiv)):this._spawnESheep(),!1;for(var s=0;s<t.length;s++)a+=parseInt(t[s].getAttribute("probability"));var m=Math.random()*a,o=0;for(s=a=0;s<t.length;s++)if(m<=(a+=parseInt(t[s].getAttribute("probability")))){o=s;break}for(s=0;s<i.length;s++)if(i[s].getAttribute("id")==t[o].textContent){this.animationId=i[s].getAttribute("id"),this.animationStep=0,this.animationNode=i[s],n=!0;break}if(n){i=this.xmlDoc.getElementsByTagName("childs")[0].getElementsByTagName("child");for(s=0;s<i.length;s++)if(i[s].getAttribute("animationid")==this.animationId){ACTIVATE_DEBUG&&console.log("Child from Animation");var h=new eSheep(!0);h.animationId=i[s].getElementsByTagName("next")[0].textContent;var r=i[s].getElementsByTagName("x")[0].textContent,g=i[s].getElementsByTagName("y")[0].textContent;h._setPosition(this._parseKeyWords(r),this._parseKeyWords(g),!0),h.Start(this.animationFile);break}}return n}},{key:"_checkOverlapping",value:function(){var e,t=this.imageX,i=this.imageY+this.imageH,a=20;for(var n in this.HTMLelement&&(a=5),COLLISION_WITH)for(var s=document.body.getElementsByTagName(COLLISION_WITH[n]),m=0;m<s.length;m++)if(i>(e=s[m].getBoundingClientRect()).top-2&&i<e.top+a&&t>e.left&&t<e.right-this.imageW){var o=window.getComputedStyle(s[m]);if(""!=o.borderTopStyle&&"none"!=o.borderTopStyle&&"none"!=o.display)return s[m]}return!1}},{key:"_getNodeValue",value:function(e,t,i){if(this.animationNode&&this.animationNode.getElementsByTagName(e)){if(this.animationNode.getElementsByTagName(e)[0].getElementsByTagName(t)[0]){var a=this.animationNode.getElementsByTagName(e)[0].getElementsByTagName(t)[0].textContent;return this._parseKeyWords(a)}return i}}},{key:"_nextESheepStep",value:function(){var e,t=this._getNodeValue("start","x",0),i=this._getNodeValue("start","y",0),a=(this._getNodeValue("start","offsety",0),this._getNodeValue("start","opacity",1),this._getNodeValue("start","interval",1e3)),n=this._getNodeValue("end","x",0),s=this._getNodeValue("end","y",0),m=(this._getNodeValue("end","offsety",0),this._getNodeValue("end","interval",1),this._getNodeValue("end","interval",1e3)),o=this._parseKeyWords(this.animationNode.getElementsByTagName("sequence")[0].getAttribute("repeat")),h=this.animationNode.getElementsByTagName("sequence")[0].getAttribute("repeatfrom"),r=this.animationNode.getElementsByTagName("gravity"),g=this.animationNode.getElementsByTagName("border"),l=this.animationNode.getElementsByTagName("frame").length+(this.animationNode.getElementsByTagName("frame").length-h)*o;if(e=this.animationStep<this.animationNode.getElementsByTagName("frame").length?this.animationNode.getElementsByTagName("frame")[this.animationStep].textContent:0==h?this.animationNode.getElementsByTagName("frame")[this.animationStep%this.animationNode.getElementsByTagName("frame").length].textContent:this.animationNode.getElementsByTagName("frame")[parseInt(h)+parseInt((this.animationStep-h)%(this.animationNode.getElementsByTagName("frame").length-h))].textContent,this.DOMimg.style.left=-this.imageW*(e%this.tilesX)+"px",this.DOMimg.style.top=-this.imageH*parseInt(e/this.tilesX)+"px",this.dragging||this.infobox)return this.animationStep++,void setTimeout(this._nextESheepStep.bind(this),50);if(this.flipped&&(t=-t,n=-n),0==this.animationStep?this._setPosition(t,i,!1):this._setPosition(parseInt(t)+parseInt((n-t)*this.animationStep/l),parseInt(i)+parseInt((s-i)*this.animationStep/l),!1),this.animationStep++,this.animationStep>=l){if(this.animationNode.getElementsByTagName("action")[0])switch(this.animationNode.getElementsByTagName("action")[0].textContent){case"flip":"rotateY(0deg)"==this.DOMdiv.style.transform?(this.DOMdiv.style.transform="rotateY(180deg)",this.flipped=!0):(this.DOMdiv.style.transform="rotateY(0deg)",this.flipped=!1)}if(!this._getNextRandomNode(this.animationNode.getElementsByTagName("sequence")[0]))return}var d=!1;return g&&g[0]&&g[0].getElementsByTagName("next")&&(n<0&&this.imageX<0?d=!(this.imageX=0):0<n&&this.imageX>this.screenW-this.imageW?(this.imageX=this.screenW-this.imageW,this.DOMdiv.style.left=parseInt(this.imageX)+"px",d=!0):s<0&&this.imageY<0?d=!(this.imageY=0):0<s&&this.imageY>this.screenH-this.imageH?(this.imageY=this.screenH-this.imageH,d=!0):0<s?this._checkOverlapping()&&this.imageY>this.imageH&&(this.HTMLelement=this._checkOverlapping(),this.imageY=Math.ceil(this.HTMLelement.getBoundingClientRect().top)-this.imageH,d=!0):this.HTMLelement&&(this._checkOverlapping()||(this.imageY+this.imageH>this.HTMLelement.getBoundingClientRect().top+3||this.imageY+this.imageH<this.HTMLelement.getBoundingClientRect().top-3?this.HTMLelement=null:(this.imageX<this.HTMLelement.getBoundingClientRect().left?this.imageX=parseInt(this.imageX+3):this.imageX=parseInt(this.imageX-3),d=!0),this.DOMdiv.style.left=parseInt(this.imageX)+"px")),d&&!this._getNextRandomNode(g[0]))||!d&&r&&r[0]&&r[0].getElementsByTagName("next")&&this.imageY<this.screenH-this.imageH-2&&(null==this.HTMLelement?d=!0:this._checkOverlapping()||(d=!0,this.HTMLelement=null),d&&!this._getNextRandomNode(r[0]))?void 0:!d&&(this.imageX<-this.imageW&&n<0||this.imageX>this.screenW&&0<n||this.imageY<-this.imageH&&i<0||this.imageY>this.screenH&&0<s)?(d=!0,void(this.isChild||this._spawnESheep())):void setTimeout(this._nextESheepStep.bind(this),parseInt(a)+parseInt((m-a)*this.animationStep/l))}}]),eSheep}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
